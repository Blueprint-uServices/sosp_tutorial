package hellososp

import (
	"github.com/blueprint-uservices/blueprint/plugins/golang"
	"github.com/blueprint-uservices/blueprint/plugins/golang/gocode"
	"github.com/blueprint-uservices/blueprint/plugins/golang/gogen"
)

type templateArgs struct {
	Package         golang.PackageInfo
	Service         *gocode.ServiceInterface
	Iface           *gocode.ServiceInterface
	Name            string
	IfaceName       string
	Imports         *gogen.Imports
	ServerIfaceName string
}

var serverInstrumentTemplate = `// Blueprint: Auto-generated by Tutorial Plugin
// Step 1: Add Package Name
package {{.Package.ShortName}}

// Step 2: Add Imports
{{.Imports}}

// Step 3: Add a server-side struct
type {{.Name}} struct {
	Service {{.Imports.NameOf .Service.UserType}}
}

// Step 4: Add a constructor for the server-side struct
func New_{{.Name}}(ctx context.Context, service {{.Imports.NameOf .Service.UserType}}) (*{{.Name}}, error) {
	handler := &{{.Name}}{}
	handler.Service = service
	return handler, nil
}

// Step 5: Add all the modified methods that now prints a message
{{$service := .Service.Name -}}
{{$receiver := .Name -}}
{{ range $_, $f := .Service.Methods }}
func (handler *{{$receiver}}) {{$f.Name -}} ({{ArgVarsAndTypes $f "ctx context.Context"}}) ({{RetTypes $f "error"}}) {
	log.Println("Hello SOSP attendee, from server-side method {{$f.Name}}")
	return handler.Service.{{$f.Name}}({{ArgVars $f "ctx"}})
}
{{end}}
`

// TODO: Implement this client-side template
var clientInstrumentTemplate = `// Blueprint: Auto-generated by Tutorial Plugin
// Step 1: Add Package Name

// Step 2: Add Imports

// Step 3: Add a client-side struct

// Step 4: Add a constructor for the client side struct

// Step 5: Add all the modified methods that now prints a client-side message
`
